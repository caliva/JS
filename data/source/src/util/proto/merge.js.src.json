[null,null,null,["merge.js","src/util/proto/merge.js",[null,"/**"," * Bloombox Utils: Protobuf"," *"," * @fileoverview Provides tools and utilities related to protobuf messages."," */",null,"/*global goog */",null,"goog.require('goog.asserts');","goog.require('jspb.Message');",null,"goog.provide('bloombox.util.proto.merge');",null,null,"// - Interface: Exportable - //","/**"," * Merge to protobuf message objects of the same type, by copying the `to`"," * message, and then:"," * - Copying all set properties from `to` into the copy"," * - Copying all set properties from `from` into the copy"," *"," * Both types must extend `jspb.Message`. A message of the same type will be"," * returned."," *"," * This function partially follows protobuf merge semantics,"," * which are defined as follows:"," * \"Singular fields that are set in the specified message overwrite the"," *  corresponding fields in the current message. Repeated fields are appended."," *  Singular sub-messages and groups are recursively merged.\""," *  - Protocol Buffer docs for Python"," *    https://developers.google.com/protocol-buffers/docs/reference/python/google.protobuf.message.Message-class#MergeFrom"," *"," * The only difference being, repeated fields overwrite instead of being"," * appended-to, to avoid needing reflection at runtime."," *"," * @template T"," * @param {T} fromMessage Message that should win when fields collide."," * @param {T} toMessage Message that should lose when fields collide."," * @return {T} Merged message, described as above."," */","bloombox.util.proto.merge = function(fromMessage, toMessage) {","  // Type checks","  goog.asserts.assertInstanceof(fromMessage, jspb.Message);","  goog.asserts.assertInstanceof(toMessage, jspb.Message);","  goog.asserts.assert(fromMessage.constructor === toMessage.constructor,","    'Merge source and target should have the same type.');",null,"  // Serialize the source message into an array.","  let from = fromMessage.toArray();",null,"  if (from.length === 0)","    // We can just return the `to`, there is nothing to merge.","    return toMessage;",null,"  let toClone = jspb.Message.clone(toMessage);","  let to = toClone.toArray();",null,"  let i;","  let fromValue;",null,"  // Copy each item from the `from` to the `to`. Protobuf preserves order in","  // `toArray`, enabling this behavior. We're intentionally not truncating the","  // target message, because we're merging, not making a clone.","  for (i = 0; i < from.length; i++) {","    fromValue = from[i];",null,"    if (fromValue !== undefined) {","      // we have a value to merge in","      to[i] = fromValue;","    } else {","      // the field is undefined in the merge-from, so skip it","    }","  }","  return toClone;","};"]]]