[null,null,null,["person.js","src/identity/person.js",[null,"/**"," * Bloombox: Person"," *"," * @fileoverview Provides a central object to express a human being."," */",null,"/*global goog */",null,"goog.provide('bloombox.identity.ContactInfo');","goog.provide('bloombox.identity.Person');","goog.provide('bloombox.identity.PersonException');","goog.provide('bloombox.identity.StreetAddress');",null,"goog.require('proto.person.Name');","goog.require('proto.temporal.Date');",null,null,"/**"," * Represents an exception that occurred while creating or validating a user."," *"," * @param {string} message Exception error message."," * @constructor"," */","bloombox.identity.PersonException = function PersonException(message) {","  this.message = message;","};",null,null,"// -- Street Address -- //",null,"/**"," * Physical street address for a user/person."," *"," * @param {string} firstLine First address line."," * @param {?string} secondLine Second address line, if any."," * @param {string} city City name."," * @param {string} state State or province code, like \"CA\"."," * @param {string} zip USPS zipcode."," * @param {?string=} country Optional country code. Defaults to \"USA\"."," * @throws {bloombox.identity.PersonException} If provided data is not valid."," * @constructor"," * @export"," */","bloombox.identity.StreetAddress = function StreetAddress(firstLine,","                                                         secondLine,","                                                         city,","                                                         state,","                                                         zip,","                                                         country) {","  // checks/validations","  if (!firstLine || !(typeof firstLine === 'string'))","    throw new bloombox.identity.PersonException(","      'Invalid first address line: \\'' + firstLine + '\\'.');","  if (!city || !(typeof city === 'string'))","    throw new bloombox.identity.PersonException(","      'Invalid address city: \\'' + city + '\\'.');","  if (!zip || !(typeof zip === 'string'))","    throw new bloombox.identity.PersonException(","      'Invalid address zip: \\'' + zip + '\\'.');","  if (!state || !(typeof state === 'string'))","    throw new bloombox.identity.PersonException(","      'Invalid address state: \\'' + state + '\\'.');",null,"  /**","   * First address line.","   * @type {string}","   * @export","   */","  this.firstLine = firstLine;",null,"  /**","   * Second address line, if any.","   * @type {?string}","   * @export","   */","  this.secondLine = secondLine || null;",null,"  /**","   * City name.","   * @type {string}","   * @export","   */","  this.city = city;",null,"  /**","   * State code, like \"CA\" for California.","   * @type {string}","   * @export","   */","  this.state = state;",null,"  /**","   * USPS zipcode.","   * @type {string}","   * @export","   */","  this.zip = zip;",null,"  /**","   * Country code, like \"US\" for United States.","   * @type {string}","   * @export","   */","  this.country = country || 'USA';","};",null,null,"// -- Contact Info -- //",null,"/**"," * Contact information for a user."," *"," * @param {?string} emailAddress Email address for a user."," * @param {?string} phoneNumber Phone number for a user."," * @param {?bloombox.identity.StreetAddress=} streetAddress Street"," *        address for a user."," * @throws {bloombox.identity.PersonException} If provided data is not valid."," * @constructor"," * @export"," */","bloombox.identity.ContactInfo = function ContactInfo(emailAddress,","                                                     phoneNumber,","                                                     streetAddress) {","  if (!emailAddress || !(typeof emailAddress === 'string'))","    throw new bloombox.identity.PersonException(","      'Invalid email address: \\'' + emailAddress + '\\'.');",null,"  /**","   * Email address.","   * @type {string}","   * @export","   */","  this.emailAddress = emailAddress;",null,"  /**","   * Phone number.","   * @type {?string}","   * @export","   */","  this.phoneNumber = phoneNumber || null;",null,"  /**","   * Street address.","   * @type {?bloombox.identity.StreetAddress}","   * @export","   */","  this.streetAddress = streetAddress || null;","};",null,null,"// -- Person -- //",null,"/**"," * Represents a human being, with contact info and a date of birth."," *"," * @param {string} firstName Person's given name."," * @param {string} lastName Person's family name."," * @param {bloombox.identity.ContactInfo} contactInfo Contact info for this"," *        person."," * @param {?string} dateOfBirth Date of birth for this person, in YYYY-MM-DD"," *        format."," * @constructor"," * @export"," */","bloombox.identity.Person = function Person(firstName,","                                           lastName,","                                           contactInfo,","                                           dateOfBirth) {","  if (!firstName || !(typeof firstName === 'string'))","    throw new bloombox.identity.PersonException(","      'Invalid first name: \\'' + firstName + '\\'.');","  if (!lastName || !(typeof lastName === 'string'))","    throw new bloombox.identity.PersonException(","      'Invalid last name: \\'' + lastName + '\\'.');","  if (!contactInfo)","    throw new bloombox.identity.PersonException(","      'Invalid contact info: \\'' + lastName + '\\'.');","  if (dateOfBirth !== null &&","     (!dateOfBirth || !(typeof dateOfBirth === 'string')))","    throw new bloombox.identity.PersonException(","      'Invalid date of birth (must be in YYYY-MM-DD format): \\'' +","      dateOfBirth + '\\'.');",null,"  // setup a name object","  let name = new proto.person.Name();","  name.setFirstName(firstName);","  name.setLastName(lastName);",null,"  // setup an instant object","  let instant = new proto.temporal.Date();","  if (dateOfBirth !== null) {","    instant.setIso8601(dateOfBirth);","  }",null,"  /**","   * Person's name.","   * @type {proto.person.Name}","   * @export","   */","  this.name = name;",null,"  /**","   * Person's contact info.","   * @type {bloombox.identity.ContactInfo}","   * @export","   */","  this.contactInfo = contactInfo;",null,"  /**","   * Person's date of birth.","   * @type {?proto.temporal.Date}","   * @export","   */","  this.dateOfBirth = dateOfBirth !== null ? instant : null;","};"]]]